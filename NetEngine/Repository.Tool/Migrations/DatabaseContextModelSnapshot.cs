// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository.Database;

#nullable disable

namespace Repository.Tool.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Repository.Database.TAppSetting", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasComment("主键标识ID");

                    b.Property<DateTimeOffset>("CreateTime")
                        .HasColumnType("datetime(6)")
                        .HasComment("创建时间");

                    b.Property<DateTimeOffset?>("DeleteTime")
                        .HasColumnType("datetime(6)")
                        .HasComment("删除时间");

                    b.Property<long?>("GroupId")
                        .HasColumnType("bigint")
                        .HasComment("组ID");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("tinyint(1)")
                        .HasComment("是否删除");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasComment("键名");

                    b.Property<string>("Module")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasComment("模块");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int unsigned")
                        .HasComment("行版本标记");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasComment("键值");

                    b.HasKey("Id");

                    b.HasIndex("CreateTime");

                    b.HasIndex("DeleteTime");

                    b.HasIndex("Module");

                    b.ToTable("AppSetting", null, t =>
                        {
                            t.HasComment("系统配置信息表");
                        });
                });

            modelBuilder.Entity("Repository.Database.TArticle", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasComment("主键标识ID");

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint")
                        .HasComment("类别ID");

                    b.Property<int>("ClickCount")
                        .HasColumnType("int")
                        .HasComment("点击数");

                    b.Property<string>("Content")
                        .HasColumnType("longtext")
                        .HasComment("内容");

                    b.Property<DateTimeOffset>("CreateTime")
                        .HasColumnType("datetime(6)")
                        .HasComment("创建时间");

                    b.Property<long?>("CreateUserId")
                        .HasColumnType("bigint")
                        .HasComment("创建人ID");

                    b.Property<DateTimeOffset?>("DeleteTime")
                        .HasColumnType("datetime(6)")
                        .HasComment("删除时间");

                    b.Property<long?>("DeleteUserId")
                        .HasColumnType("bigint")
                        .HasComment("删除人ID");

                    b.Property<string>("Digest")
                        .HasColumnType("longtext")
                        .HasComment("摘要");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("tinyint(1)")
                        .HasComment("是否删除");

                    b.Property<bool>("IsDisplay")
                        .HasColumnType("tinyint(1)")
                        .HasComment("是否显示");

                    b.Property<bool>("IsRecommend")
                        .HasColumnType("tinyint(1)")
                        .HasComment("是否推荐");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int unsigned")
                        .HasComment("行版本标记");

                    b.Property<int>("Sort")
                        .HasColumnType("int")
                        .HasComment("排序");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasComment("标题");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreateTime");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("DeleteTime");

                    b.HasIndex("DeleteUserId");

                    b.HasIndex("Title");

                    b.ToTable("Article", null, t =>
                        {
                            t.HasComment("文章表");
                        });
                });

            modelBuilder.Entity("Repository.Database.TCategory", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasComment("主键标识ID");

                    b.Property<DateTimeOffset>("CreateTime")
                        .HasColumnType("datetime(6)")
                        .HasComment("创建时间");

                    b.Property<long?>("CreateUserId")
                        .HasColumnType("bigint")
                        .HasComment("创建人ID");

                    b.Property<DateTimeOffset?>("DeleteTime")
                        .HasColumnType("datetime(6)")
                        .HasComment("删除时间");

                    b.Property<long?>("DeleteUserId")
                        .HasColumnType("bigint")
                        .HasComment("删除人ID");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("tinyint(1)")
                        .HasComment("是否删除");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasComment("栏目名目");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint")
                        .HasComment("父级栏目ID");

                    b.Property<string>("Remarks")
                        .HasColumnType("longtext")
                        .HasComment("备注");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int unsigned")
                        .HasComment("行版本标记");

                    b.Property<int>("Sort")
                        .HasColumnType("int")
                        .HasComment("排序");

                    b.HasKey("Id");

                    b.HasIndex("CreateTime");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("DeleteTime");

                    b.HasIndex("DeleteUserId");

                    b.HasIndex("Name");

                    b.HasIndex("ParentId");

                    b.ToTable("Category", null, t =>
                        {
                            t.HasComment("栏目信息表");
                        });
                });

            modelBuilder.Entity("Repository.Database.TDataUpdateLog", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasComment("主键标识ID");

                    b.Property<long?>("ActionUserId")
                        .HasColumnType("bigint")
                        .HasComment("操作人信息");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasComment("变动内容");

                    b.Property<DateTimeOffset>("CreateTime")
                        .HasColumnType("datetime(6)")
                        .HasComment("创建时间");

                    b.Property<DateTimeOffset?>("DeleteTime")
                        .HasColumnType("datetime(6)")
                        .HasComment("删除时间");

                    b.Property<string>("DeviceMark")
                        .HasColumnType("longtext")
                        .HasComment("设备标记");

                    b.Property<string>("IpAddress")
                        .HasColumnType("longtext")
                        .HasComment("Ip地址");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("tinyint(1)")
                        .HasComment("是否删除");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int unsigned")
                        .HasComment("行版本标记");

                    b.Property<string>("Table")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasComment("外链表名");

                    b.Property<long>("TableId")
                        .HasColumnType("bigint")
                        .HasComment("外链表ID");

                    b.HasKey("Id");

                    b.HasIndex("ActionUserId");

                    b.HasIndex("CreateTime");

                    b.HasIndex("DeleteTime");

                    b.HasIndex("Table");

                    b.HasIndex("TableId");

                    b.ToTable("DataUpdateLog", null, t =>
                        {
                            t.HasComment("TDataUpdateLog");
                        });
                });

            modelBuilder.Entity("Repository.Database.TFile", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasComment("主键标识ID");

                    b.Property<DateTimeOffset>("CreateTime")
                        .HasColumnType("datetime(6)")
                        .HasComment("创建时间");

                    b.Property<long?>("CreateUserId")
                        .HasColumnType("bigint")
                        .HasComment("创建人ID");

                    b.Property<DateTimeOffset?>("DeleteTime")
                        .HasColumnType("datetime(6)")
                        .HasComment("删除时间");

                    b.Property<long?>("DeleteUserId")
                        .HasColumnType("bigint")
                        .HasComment("删除人ID");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("tinyint(1)")
                        .HasComment("是否删除");

                    b.Property<long>("Length")
                        .HasColumnType("bigint")
                        .HasComment("文件大小");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasComment("文件名称");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasComment("保存路径");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int unsigned")
                        .HasComment("行版本标记");

                    b.Property<string>("Sign")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasComment("标记");

                    b.Property<int>("Sort")
                        .HasColumnType("int")
                        .HasComment("排序");

                    b.Property<string>("Table")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasComment("外链表名");

                    b.Property<long>("TableId")
                        .HasColumnType("bigint")
                        .HasComment("外链表ID");

                    b.HasKey("Id");

                    b.HasIndex("CreateTime");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("DeleteTime");

                    b.HasIndex("DeleteUserId");

                    b.HasIndex("Sign");

                    b.HasIndex("Table");

                    b.HasIndex("TableId");

                    b.ToTable("File", null, t =>
                        {
                            t.HasComment("文件表");
                        });
                });

            modelBuilder.Entity("Repository.Database.TFunction", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasComment("主键标识ID");

                    b.Property<DateTimeOffset>("CreateTime")
                        .HasColumnType("datetime(6)")
                        .HasComment("创建时间");

                    b.Property<DateTimeOffset?>("DeleteTime")
                        .HasColumnType("datetime(6)")
                        .HasComment("删除时间");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("tinyint(1)")
                        .HasComment("是否删除");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasComment("名称");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint")
                        .HasComment("父级信息");

                    b.Property<string>("Remarks")
                        .HasColumnType("longtext")
                        .HasComment("备注");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int unsigned")
                        .HasComment("行版本标记");

                    b.Property<string>("Sign")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasComment("标记");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasComment("类型");

                    b.HasKey("Id");

                    b.HasIndex("CreateTime");

                    b.HasIndex("DeleteTime");

                    b.HasIndex("ParentId");

                    b.HasIndex("Sign");

                    b.ToTable("Function", null, t =>
                        {
                            t.HasComment("系统功能配置表");
                        });
                });

            modelBuilder.Entity("Repository.Database.TFunctionAuthorize", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasComment("主键标识ID");

                    b.Property<DateTimeOffset>("CreateTime")
                        .HasColumnType("datetime(6)")
                        .HasComment("创建时间");

                    b.Property<long?>("CreateUserId")
                        .HasColumnType("bigint")
                        .HasComment("创建人ID");

                    b.Property<DateTimeOffset?>("DeleteTime")
                        .HasColumnType("datetime(6)")
                        .HasComment("删除时间");

                    b.Property<long?>("DeleteUserId")
                        .HasColumnType("bigint")
                        .HasComment("删除人ID");

                    b.Property<long>("FunctionId")
                        .HasColumnType("bigint")
                        .HasComment("功能ID");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("tinyint(1)")
                        .HasComment("是否删除");

                    b.Property<long?>("RoleId")
                        .HasColumnType("bigint")
                        .HasComment("角色ID");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int unsigned")
                        .HasComment("行版本标记");

                    b.Property<DateTimeOffset?>("UpdateTime")
                        .HasColumnType("datetime(6)")
                        .HasComment("更新时间");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnType("bigint")
                        .HasComment("编辑人ID");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasComment("用户信息");

                    b.HasKey("Id");

                    b.HasIndex("CreateTime");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("DeleteTime");

                    b.HasIndex("DeleteUserId");

                    b.HasIndex("FunctionId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UpdateTime");

                    b.HasIndex("UpdateUserId");

                    b.HasIndex("UserId");

                    b.ToTable("FunctionAuthorize", null, t =>
                        {
                            t.HasComment("功能授权配置表");
                        });
                });

            modelBuilder.Entity("Repository.Database.TFunctionRoute", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasComment("主键标识ID");

                    b.Property<DateTimeOffset>("CreateTime")
                        .HasColumnType("datetime(6)")
                        .HasComment("创建时间");

                    b.Property<DateTimeOffset?>("DeleteTime")
                        .HasColumnType("datetime(6)")
                        .HasComment("删除时间");

                    b.Property<long?>("FunctionId")
                        .HasColumnType("bigint")
                        .HasComment("功能信息");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("tinyint(1)")
                        .HasComment("是否删除");

                    b.Property<string>("Module")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasComment("模块");

                    b.Property<string>("Remarks")
                        .HasColumnType("longtext")
                        .HasComment("备注");

                    b.Property<string>("Route")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasComment("路由");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int unsigned")
                        .HasComment("行版本标记");

                    b.HasKey("Id");

                    b.HasIndex("CreateTime");

                    b.HasIndex("DeleteTime");

                    b.HasIndex("FunctionId");

                    b.ToTable("FunctionRoute", null, t =>
                        {
                            t.HasComment("功能模块对应路由记录表");
                        });
                });

            modelBuilder.Entity("Repository.Database.TLink", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasComment("主键标识ID");

                    b.Property<DateTimeOffset>("CreateTime")
                        .HasColumnType("datetime(6)")
                        .HasComment("创建时间");

                    b.Property<long?>("CreateUserId")
                        .HasColumnType("bigint")
                        .HasComment("创建人ID");

                    b.Property<DateTimeOffset?>("DeleteTime")
                        .HasColumnType("datetime(6)")
                        .HasComment("删除时间");

                    b.Property<long?>("DeleteUserId")
                        .HasColumnType("bigint")
                        .HasComment("删除人ID");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("tinyint(1)")
                        .HasComment("是否删除");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasComment("名称");

                    b.Property<string>("Remarks")
                        .HasColumnType("longtext")
                        .HasComment("备注");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int unsigned")
                        .HasComment("行版本标记");

                    b.Property<int>("Sort")
                        .HasColumnType("int")
                        .HasComment("排序");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasComment("地址");

                    b.HasKey("Id");

                    b.HasIndex("CreateTime");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("DeleteTime");

                    b.HasIndex("DeleteUserId");

                    b.HasIndex("Sort");

                    b.ToTable("Link", null, t =>
                        {
                            t.HasComment("友情链接表");
                        });
                });

            modelBuilder.Entity("Repository.Database.TLog", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasComment("主键标识ID");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasComment("类别");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasComment("内容");

                    b.Property<DateTimeOffset>("CreateTime")
                        .HasColumnType("datetime(6)")
                        .HasComment("创建时间");

                    b.Property<DateTimeOffset?>("DeleteTime")
                        .HasColumnType("datetime(6)")
                        .HasComment("删除时间");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("tinyint(1)")
                        .HasComment("是否删除");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasComment("日志等级");

                    b.Property<string>("MachineName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasComment("机器名称");

                    b.Property<string>("Project")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasComment("项目");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int unsigned")
                        .HasComment("行版本标记");

                    b.HasKey("Id");

                    b.HasIndex("CreateTime");

                    b.HasIndex("DeleteTime");

                    b.ToTable("Log", null, t =>
                        {
                            t.HasComment("日志表");
                        });
                });

            modelBuilder.Entity("Repository.Database.TOrder", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasComment("主键标识ID");

                    b.Property<DateTimeOffset>("CreateTime")
                        .HasColumnType("datetime(6)")
                        .HasComment("创建时间");

                    b.Property<long?>("CreateUserId")
                        .HasColumnType("bigint")
                        .HasComment("创建人ID");

                    b.Property<DateTimeOffset?>("DeleteTime")
                        .HasColumnType("datetime(6)")
                        .HasComment("删除时间");

                    b.Property<long?>("DeleteUserId")
                        .HasColumnType("bigint")
                        .HasComment("删除人ID");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("tinyint(1)")
                        .HasComment("是否删除");

                    b.Property<string>("OrderNo")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasComment("订单号");

                    b.Property<decimal?>("PayPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasComment("实际支付金额");

                    b.Property<bool>("PayState")
                        .HasColumnType("tinyint(1)")
                        .HasComment("支付状态");

                    b.Property<DateTimeOffset?>("PayTime")
                        .HasColumnType("datetime(6)")
                        .HasComment("支付时间");

                    b.Property<string>("PayType")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasComment("支付方式");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasComment("价格");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int unsigned")
                        .HasComment("行版本标记");

                    b.Property<string>("SerialNo")
                        .HasColumnType("longtext")
                        .HasComment("支付流水号");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasComment("订单状态");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasComment("订单类型");

                    b.Property<DateTimeOffset?>("UpdateTime")
                        .HasColumnType("datetime(6)")
                        .HasComment("更新时间");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnType("bigint")
                        .HasComment("编辑人ID");

                    b.HasKey("Id");

                    b.HasIndex("CreateTime");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("DeleteTime");

                    b.HasIndex("DeleteUserId");

                    b.HasIndex("OrderNo");

                    b.HasIndex("UpdateTime");

                    b.HasIndex("UpdateUserId");

                    b.ToTable("Order", null, t =>
                        {
                            t.HasComment("订单表");
                        });
                });

            modelBuilder.Entity("Repository.Database.TOrderDetail", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasComment("主键标识ID");

                    b.Property<DateTimeOffset>("CreateTime")
                        .HasColumnType("datetime(6)")
                        .HasComment("创建时间");

                    b.Property<DateTimeOffset?>("DeleteTime")
                        .HasColumnType("datetime(6)")
                        .HasComment("删除时间");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("tinyint(1)")
                        .HasComment("是否删除");

                    b.Property<int>("Number")
                        .HasColumnType("int")
                        .HasComment("产品数量");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint")
                        .HasComment("订单ID");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint")
                        .HasComment("产品ID");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int unsigned")
                        .HasComment("行版本标记");

                    b.HasKey("Id");

                    b.HasIndex("CreateTime");

                    b.HasIndex("DeleteTime");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetail", null, t =>
                        {
                            t.HasComment("订单详情表");
                        });
                });

            modelBuilder.Entity("Repository.Database.TProduct", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasComment("主键标识ID");

                    b.Property<DateTimeOffset>("CreateTime")
                        .HasColumnType("datetime(6)")
                        .HasComment("创建时间");

                    b.Property<long?>("CreateUserId")
                        .HasColumnType("bigint")
                        .HasComment("创建人ID");

                    b.Property<DateTimeOffset?>("DeleteTime")
                        .HasColumnType("datetime(6)")
                        .HasComment("删除时间");

                    b.Property<long?>("DeleteUserId")
                        .HasColumnType("bigint")
                        .HasComment("删除人ID");

                    b.Property<string>("Detail")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasComment("描述");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("tinyint(1)")
                        .HasComment("是否删除");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasComment("名称");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasComment("价格");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int unsigned")
                        .HasComment("行版本标记");

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasComment("SKU");

                    b.Property<DateTimeOffset?>("UpdateTime")
                        .HasColumnType("datetime(6)")
                        .HasComment("更新时间");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnType("bigint")
                        .HasComment("编辑人ID");

                    b.HasKey("Id");

                    b.HasIndex("CreateTime");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("DeleteTime");

                    b.HasIndex("DeleteUserId");

                    b.HasIndex("Name");

                    b.HasIndex("SKU");

                    b.HasIndex("UpdateTime");

                    b.HasIndex("UpdateUserId");

                    b.ToTable("Product", null, t =>
                        {
                            t.HasComment("产品表");
                        });
                });

            modelBuilder.Entity("Repository.Database.TQueueTask", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasComment("主键标识ID");

                    b.Property<string>("CallbackName")
                        .HasColumnType("longtext")
                        .HasComment("回调任务名称");

                    b.Property<string>("CallbackParameter")
                        .HasColumnType("longtext")
                        .HasComment("回调参数");

                    b.Property<int>("Count")
                        .HasColumnType("int")
                        .HasComment("执行次数");

                    b.Property<DateTimeOffset>("CreateTime")
                        .HasColumnType("datetime(6)")
                        .HasComment("创建时间");

                    b.Property<DateTimeOffset?>("DeleteTime")
                        .HasColumnType("datetime(6)")
                        .HasComment("删除时间");

                    b.Property<DateTimeOffset?>("FirstTime")
                        .HasColumnType("datetime(6)")
                        .HasComment("首次执行时间");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("tinyint(1)")
                        .HasComment("是否删除");

                    b.Property<DateTimeOffset?>("LastTime")
                        .HasColumnType("datetime(6)")
                        .HasComment("最后一次执行时间");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasComment("任务名称");

                    b.Property<string>("Parameter")
                        .HasColumnType("longtext")
                        .HasComment("参数");

                    b.Property<DateTimeOffset?>("PlanTime")
                        .HasColumnType("datetime(6)")
                        .HasComment("计划执行时间");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int unsigned")
                        .HasComment("行版本标记");

                    b.Property<DateTimeOffset?>("SuccessTime")
                        .HasColumnType("datetime(6)")
                        .HasComment("成功执行时间");

                    b.HasKey("Id");

                    b.HasIndex("CreateTime");

                    b.HasIndex("DeleteTime");

                    b.ToTable("QueueTask", null, t =>
                        {
                            t.HasComment("队列任务表");
                        });
                });

            modelBuilder.Entity("Repository.Database.TRole", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasComment("主键标识ID");

                    b.Property<DateTimeOffset>("CreateTime")
                        .HasColumnType("datetime(6)")
                        .HasComment("创建时间");

                    b.Property<DateTimeOffset?>("DeleteTime")
                        .HasColumnType("datetime(6)")
                        .HasComment("删除时间");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("tinyint(1)")
                        .HasComment("是否删除");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasComment("角色名称");

                    b.Property<string>("Remarks")
                        .HasColumnType("longtext")
                        .HasComment("备注信息");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int unsigned")
                        .HasComment("行版本标记");

                    b.HasKey("Id");

                    b.HasIndex("CreateTime");

                    b.HasIndex("DeleteTime");

                    b.ToTable("Role", null, t =>
                        {
                            t.HasComment("角色信息表");
                        });
                });

            modelBuilder.Entity("Repository.Database.TStudent", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasComment("主键标识ID");

                    b.Property<int>("Age")
                        .HasColumnType("int")
                        .HasComment("年齡");

                    b.Property<DateOnly>("Birthday")
                        .HasColumnType("date")
                        .HasComment("生日");

                    b.Property<DateTimeOffset>("CreateTime")
                        .HasColumnType("datetime(6)")
                        .HasComment("创建时间");

                    b.Property<DateTimeOffset?>("DeleteTime")
                        .HasColumnType("datetime(6)")
                        .HasComment("删除时间");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("tinyint(1)")
                        .HasComment("是否删除");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasComment("姓名");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int unsigned")
                        .HasComment("行版本标记");

                    b.HasKey("Id");

                    b.HasIndex("CreateTime");

                    b.HasIndex("DeleteTime");

                    b.ToTable("Student", null, t =>
                        {
                            t.HasComment("學生紀錄表");
                        });
                });

            modelBuilder.Entity("Repository.Database.TTaskSetting", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasComment("主键标识ID");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasComment("任务种类[\"QueueTask\",\"ScheduleTask\"]");

                    b.Property<DateTimeOffset>("CreateTime")
                        .HasColumnType("datetime(6)")
                        .HasComment("创建时间");

                    b.Property<long?>("CreateUserId")
                        .HasColumnType("bigint")
                        .HasComment("创建人ID");

                    b.Property<string>("Cron")
                        .HasColumnType("longtext")
                        .HasComment("Cron 表达式");

                    b.Property<DateTimeOffset?>("DeleteTime")
                        .HasColumnType("datetime(6)")
                        .HasComment("删除时间");

                    b.Property<long?>("DeleteUserId")
                        .HasColumnType("bigint")
                        .HasComment("删除人ID");

                    b.Property<int?>("Duration")
                        .HasColumnType("int")
                        .HasComment("预期持续时间(单位：分)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("tinyint(1)")
                        .HasComment("是否删除");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("tinyint(1)")
                        .HasComment("是否启用");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasComment("任务名称");

                    b.Property<string>("Remarks")
                        .HasColumnType("longtext")
                        .HasComment("备注");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int unsigned")
                        .HasComment("行版本标记");

                    b.Property<int?>("Semaphore")
                        .HasColumnType("int")
                        .HasComment("并发值");

                    b.Property<DateTimeOffset?>("UpdateTime")
                        .HasColumnType("datetime(6)")
                        .HasComment("更新时间");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnType("bigint")
                        .HasComment("编辑人ID");

                    b.HasKey("Id");

                    b.HasIndex("CreateTime");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("DeleteTime");

                    b.HasIndex("DeleteUserId");

                    b.HasIndex("UpdateTime");

                    b.HasIndex("UpdateUserId");

                    b.ToTable("TaskSetting", null, t =>
                        {
                            t.HasComment("任务配置");
                        });
                });

            modelBuilder.Entity("Repository.Database.TUser", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasComment("主键标识ID");

                    b.Property<DateTimeOffset>("CreateTime")
                        .HasColumnType("datetime(6)")
                        .HasComment("创建时间");

                    b.Property<long?>("CreateUserId")
                        .HasColumnType("bigint")
                        .HasComment("创建人ID");

                    b.Property<DateTimeOffset?>("DeleteTime")
                        .HasColumnType("datetime(6)")
                        .HasComment("删除时间");

                    b.Property<long?>("DeleteUserId")
                        .HasColumnType("bigint")
                        .HasComment("删除人ID");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(255)")
                        .HasComment("邮箱");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("tinyint(1)")
                        .HasComment("是否删除");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasComment("名称");

                    b.Property<string>("PassWord")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasComment("密码");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasComment("手机号");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int unsigned")
                        .HasComment("行版本标记");

                    b.Property<DateTimeOffset?>("UpdateTime")
                        .HasColumnType("datetime(6)")
                        .HasComment("更新时间");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnType("bigint")
                        .HasComment("编辑人ID");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasComment("用户名");

                    b.HasKey("Id");

                    b.HasIndex("CreateTime");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("DeleteTime");

                    b.HasIndex("DeleteUserId");

                    b.HasIndex("Email");

                    b.HasIndex("Phone");

                    b.HasIndex("UpdateTime");

                    b.HasIndex("UpdateUserId");

                    b.HasIndex("UserName");

                    b.ToTable("User", null, t =>
                        {
                            t.HasComment("用户表");
                        });
                });

            modelBuilder.Entity("Repository.Database.TUserBindExternal", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasComment("主键标识ID");

                    b.Property<string>("AppId")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasComment("AppId");

                    b.Property<string>("AppName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasComment("App名称");

                    b.Property<DateTimeOffset>("CreateTime")
                        .HasColumnType("datetime(6)")
                        .HasComment("创建时间");

                    b.Property<DateTimeOffset?>("DeleteTime")
                        .HasColumnType("datetime(6)")
                        .HasComment("删除时间");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("tinyint(1)")
                        .HasComment("是否删除");

                    b.Property<string>("OpenId")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasComment("用户绑定ID");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int unsigned")
                        .HasComment("行版本标记");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasComment("用户信息");

                    b.HasKey("Id");

                    b.HasIndex("CreateTime");

                    b.HasIndex("DeleteTime");

                    b.HasIndex("UserId");

                    b.ToTable("UserBindExternal", null, t =>
                        {
                            t.HasComment("TUserBindExternal");
                        });
                });

            modelBuilder.Entity("Repository.Database.TUserInfo", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasComment("主键标识ID");

                    b.Property<string>("Address")
                        .HasColumnType("longtext")
                        .HasComment("地址详细信息");

                    b.Property<DateTimeOffset>("CreateTime")
                        .HasColumnType("datetime(6)")
                        .HasComment("创建时间");

                    b.Property<DateTimeOffset?>("DeleteTime")
                        .HasColumnType("datetime(6)")
                        .HasComment("删除时间");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("tinyint(1)")
                        .HasComment("是否删除");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int unsigned")
                        .HasComment("行版本标记");

                    b.Property<bool?>("Sex")
                        .HasColumnType("tinyint(1)")
                        .HasComment("性别");

                    b.Property<DateTimeOffset?>("UpdateTime")
                        .HasColumnType("datetime(6)")
                        .HasComment("更新时间");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnType("bigint")
                        .HasComment("编辑人ID");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasComment("用户ID");

                    b.HasKey("Id");

                    b.HasIndex("CreateTime");

                    b.HasIndex("DeleteTime");

                    b.HasIndex("UpdateTime");

                    b.HasIndex("UpdateUserId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserInfo", null, t =>
                        {
                            t.HasComment("用户详细信息表");
                        });
                });

            modelBuilder.Entity("Repository.Database.TUserRole", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasComment("主键标识ID");

                    b.Property<DateTimeOffset>("CreateTime")
                        .HasColumnType("datetime(6)")
                        .HasComment("创建时间");

                    b.Property<long?>("CreateUserId")
                        .HasColumnType("bigint")
                        .HasComment("创建人ID");

                    b.Property<DateTimeOffset?>("DeleteTime")
                        .HasColumnType("datetime(6)")
                        .HasComment("删除时间");

                    b.Property<long?>("DeleteUserId")
                        .HasColumnType("bigint")
                        .HasComment("删除人ID");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("tinyint(1)")
                        .HasComment("是否删除");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasComment("角色信息");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int unsigned")
                        .HasComment("行版本标记");

                    b.Property<DateTimeOffset?>("UpdateTime")
                        .HasColumnType("datetime(6)")
                        .HasComment("更新时间");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnType("bigint")
                        .HasComment("编辑人ID");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasComment("用户信息");

                    b.HasKey("Id");

                    b.HasIndex("CreateTime");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("DeleteTime");

                    b.HasIndex("DeleteUserId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UpdateTime");

                    b.HasIndex("UpdateUserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRole", null, t =>
                        {
                            t.HasComment("TUserRole");
                        });
                });

            modelBuilder.Entity("Repository.Database.TUserToken", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasComment("主键标识ID");

                    b.Property<DateTimeOffset>("CreateTime")
                        .HasColumnType("datetime(6)")
                        .HasComment("创建时间");

                    b.Property<DateTimeOffset?>("DeleteTime")
                        .HasColumnType("datetime(6)")
                        .HasComment("删除时间");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("tinyint(1)")
                        .HasComment("是否删除");

                    b.Property<long?>("LastId")
                        .HasColumnType("bigint")
                        .HasComment("上一次有效的 tokenid");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int unsigned")
                        .HasComment("行版本标记");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasComment("用户ID");

                    b.HasKey("Id");

                    b.HasIndex("CreateTime");

                    b.HasIndex("DeleteTime");

                    b.HasIndex("UserId");

                    b.ToTable("UserToken", null, t =>
                        {
                            t.HasComment("用户Token记录表");
                        });
                });

            modelBuilder.Entity("Repository.Database.TArticle", b =>
                {
                    b.HasOne("Repository.Database.TCategory", "Category")
                        .WithMany("TArticle")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Repository.Database.TUser", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Repository.Database.TUser", "DeleteUser")
                        .WithMany()
                        .HasForeignKey("DeleteUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Category");

                    b.Navigation("CreateUser");

                    b.Navigation("DeleteUser");
                });

            modelBuilder.Entity("Repository.Database.TCategory", b =>
                {
                    b.HasOne("Repository.Database.TUser", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Repository.Database.TUser", "DeleteUser")
                        .WithMany()
                        .HasForeignKey("DeleteUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Repository.Database.TCategory", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreateUser");

                    b.Navigation("DeleteUser");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Repository.Database.TDataUpdateLog", b =>
                {
                    b.HasOne("Repository.Database.TUser", "ActionUser")
                        .WithMany()
                        .HasForeignKey("ActionUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ActionUser");
                });

            modelBuilder.Entity("Repository.Database.TFile", b =>
                {
                    b.HasOne("Repository.Database.TUser", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Repository.Database.TUser", "DeleteUser")
                        .WithMany()
                        .HasForeignKey("DeleteUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreateUser");

                    b.Navigation("DeleteUser");
                });

            modelBuilder.Entity("Repository.Database.TFunction", b =>
                {
                    b.HasOne("Repository.Database.TFunction", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Repository.Database.TFunctionAuthorize", b =>
                {
                    b.HasOne("Repository.Database.TUser", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Repository.Database.TUser", "DeleteUser")
                        .WithMany()
                        .HasForeignKey("DeleteUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Repository.Database.TFunction", "Function")
                        .WithMany()
                        .HasForeignKey("FunctionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Repository.Database.TRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Repository.Database.TUser", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Repository.Database.TUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreateUser");

                    b.Navigation("DeleteUser");

                    b.Navigation("Function");

                    b.Navigation("Role");

                    b.Navigation("UpdateUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Repository.Database.TFunctionRoute", b =>
                {
                    b.HasOne("Repository.Database.TFunction", "Function")
                        .WithMany("TFunctionRoute")
                        .HasForeignKey("FunctionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Function");
                });

            modelBuilder.Entity("Repository.Database.TLink", b =>
                {
                    b.HasOne("Repository.Database.TUser", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Repository.Database.TUser", "DeleteUser")
                        .WithMany()
                        .HasForeignKey("DeleteUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreateUser");

                    b.Navigation("DeleteUser");
                });

            modelBuilder.Entity("Repository.Database.TOrder", b =>
                {
                    b.HasOne("Repository.Database.TUser", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Repository.Database.TUser", "DeleteUser")
                        .WithMany()
                        .HasForeignKey("DeleteUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Repository.Database.TUser", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreateUser");

                    b.Navigation("DeleteUser");

                    b.Navigation("UpdateUser");
                });

            modelBuilder.Entity("Repository.Database.TOrderDetail", b =>
                {
                    b.HasOne("Repository.Database.TOrder", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Repository.Database.TProduct", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Repository.Database.TProduct", b =>
                {
                    b.HasOne("Repository.Database.TUser", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Repository.Database.TUser", "DeleteUser")
                        .WithMany()
                        .HasForeignKey("DeleteUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Repository.Database.TUser", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreateUser");

                    b.Navigation("DeleteUser");

                    b.Navigation("UpdateUser");
                });

            modelBuilder.Entity("Repository.Database.TTaskSetting", b =>
                {
                    b.HasOne("Repository.Database.TUser", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Repository.Database.TUser", "DeleteUser")
                        .WithMany()
                        .HasForeignKey("DeleteUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Repository.Database.TUser", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreateUser");

                    b.Navigation("DeleteUser");

                    b.Navigation("UpdateUser");
                });

            modelBuilder.Entity("Repository.Database.TUser", b =>
                {
                    b.HasOne("Repository.Database.TUser", "CreateUser")
                        .WithMany("InverseCreateUserList")
                        .HasForeignKey("CreateUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Repository.Database.TUser", "DeleteUser")
                        .WithMany("InverseDeleteUserList")
                        .HasForeignKey("DeleteUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Repository.Database.TUser", "UpdateUser")
                        .WithMany("InverseUpdateUserList")
                        .HasForeignKey("UpdateUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreateUser");

                    b.Navigation("DeleteUser");

                    b.Navigation("UpdateUser");
                });

            modelBuilder.Entity("Repository.Database.TUserBindExternal", b =>
                {
                    b.HasOne("Repository.Database.TUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Repository.Database.TUserInfo", b =>
                {
                    b.HasOne("Repository.Database.TUser", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Repository.Database.TUser", "User")
                        .WithOne("UserInfo")
                        .HasForeignKey("Repository.Database.TUserInfo", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UpdateUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Repository.Database.TUserRole", b =>
                {
                    b.HasOne("Repository.Database.TUser", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Repository.Database.TUser", "DeleteUser")
                        .WithMany()
                        .HasForeignKey("DeleteUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Repository.Database.TRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Repository.Database.TUser", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Repository.Database.TUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreateUser");

                    b.Navigation("DeleteUser");

                    b.Navigation("Role");

                    b.Navigation("UpdateUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Repository.Database.TUserToken", b =>
                {
                    b.HasOne("Repository.Database.TUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Repository.Database.TCategory", b =>
                {
                    b.Navigation("TArticle");
                });

            modelBuilder.Entity("Repository.Database.TFunction", b =>
                {
                    b.Navigation("TFunctionRoute");
                });

            modelBuilder.Entity("Repository.Database.TOrder", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Repository.Database.TUser", b =>
                {
                    b.Navigation("InverseCreateUserList");

                    b.Navigation("InverseDeleteUserList");

                    b.Navigation("InverseUpdateUserList");

                    b.Navigation("UserInfo");
                });
#pragma warning restore 612, 618
        }
    }
}
